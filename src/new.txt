import React, { useState } from "react";
import "./App.css";

function App() {
  const [messages, setMessages] = useState([
    { sender: "bot", text: "Hello üëã! How can I help you today?" }
  ]);
  const [input, setInput] = useState("");

  const sendMessage = async () => {
    if (!input.trim()) return;

    const userMessage = { sender: "user", text: input };
    setMessages([...messages, userMessage]);

    try {
      const API_BASE = window.location.hostname === "localhost"
  ? "http://127.0.0.1:5000"
  : "http://192.168.1.100:5000";

const response = await fetch(`${API_BASE}/chat`, {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({ message: input }),
});



      let data;
      try {
        data = await response.json();
      } catch {
        data = { reply: "‚ö†Ô∏è Backend returned invalid JSON!" };
      }

      setMessages((prev) => [...prev, { sender: "bot", text: data.reply }]);
    } catch (error) {
      setMessages((prev) => [...prev, { sender: "bot", text: "‚ö†Ô∏è Backend not reachable!" }]);
    }

    setInput("");
  };

  return (
    <div className="app">
      <div className="chat-box">
        {messages.map((msg, idx) => (
          <div key={idx} className={`message ${msg.sender}`} data-text={msg.text}>
            {msg.text}
          </div>
        ))}
      </div>
      <div className="input-box">
        <input
          type="text"
          placeholder="Type your message..."
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={(e) => e.key === "Enter" && sendMessage()}
        />
        <button onClick={sendMessage}>Send</button>
      </div>
    </div>
  );
}

export default App;







/* üåå Futuristic Animated Grid Background */
body {
  margin: 0;
  padding: 0;
  background: radial-gradient(circle at 20% 20%, #1e1e2f, #0d0d15);
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  color: #fff;
}

body::before {
  content: "";
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: repeating-linear-gradient(
    45deg,
    rgba(0, 255, 255, 0.1) 0 2px,
    transparent 2px 40px
  );
  animation: rotateGrid 25s linear infinite;
}

@keyframes rotateGrid {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* üî≤ Techy Glassmorphic Chat App Container */
.app {
  text-align: center;
  max-width: 650px;
  margin: 40px auto;
  font-family: "Segoe UI", Arial, sans-serif;
  background: rgba(20, 20, 40, 0.6);
  border-radius: 20px;
  backdrop-filter: blur(15px);
  border: 2px solid rgba(0, 255, 255, 0.2);
  box-shadow: 0 0 25px rgba(0, 255, 255, 0.4),
              inset 0 0 20px rgba(0, 255, 255, 0.2);
  padding: 25px;
  animation: floatApp 6s ease-in-out infinite;
}

@keyframes floatApp {
  0%, 100% { transform: translateY(0) rotateX(0deg); }
  50% { transform: translateY(-12px) rotateX(2deg); }
}

/* üí¨ Chat Box */
.chat-box {
  border-radius: 14px;
  padding: 15px;
  height: 420px;
  overflow-y: auto;
  margin-bottom: 20px;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(0, 255, 255, 0.2);
  box-shadow: inset 0 0 20px rgba(0, 255, 255, 0.1);
}

/* üì© Messages (3D Pop-in + Hologram Trail) */
.message {
  margin: 12px 0;
  padding: 12px 16px;
  border-radius: 14px;
  max-width: 75%;
  line-height: 1.5;
  font-size: 15px;
  display: inline-block;
  word-wrap: break-word;
  position: relative;
  opacity: 0;
  transform: translateY(20px) scale(0.9) rotateX(20deg);
  animation: messageAppear 0.6s ease forwards;
  overflow: hidden;
}

/* üîÆ Hologram Glow Trail Effect */
.message::after {
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  color: inherit;
  filter: blur(6px) brightness(1.8);
  opacity: 0;
  animation: hologramTrail 1s ease forwards;
  pointer-events: none;
}

@keyframes messageAppear {
  0% {
    opacity: 0;
    transform: translateY(20px) scale(0.9) rotateX(20deg);
    text-shadow: 0 0 15px rgba(0, 255, 255, 0.8);
  }
  70% {
    opacity: 1;
    transform: translateY(-2px) scale(1.05) rotateX(0deg);
    text-shadow: 0 0 25px rgba(0, 255, 255, 1);
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1) rotateX(0deg);
    text-shadow: none;
  }
}

@keyframes hologramTrail {
  0% { opacity: 0.6; transform: translateX(-5px); }
  100% { opacity: 0; transform: translateX(5px); }
}

/* User Messages */
.message.user {
  background: linear-gradient(145deg, #00f0ff, #007bff);
  color: #fff;
  margin-left: auto;
  border-bottom-right-radius: 6px;
  box-shadow: 0 0 12px rgba(0, 255, 255, 0.6);
}

.message.user:hover {
  transform: scale(1.05) translateY(-3px);
  box-shadow: 0 0 18px rgba(0, 255, 255, 0.9);
}

/* Bot Messages */
.message.bot {
  background: linear-gradient(145deg, #2e2e40, #1a1a2b);
  color: #00f0ff;
  margin-right: auto;
  border-bottom-left-radius: 6px;
  box-shadow: 0 0 12px rgba(0, 255, 255, 0.4);
}

.message.bot:hover {
  transform: scale(1.05) translateY(-3px);
  box-shadow: 0 0 18px rgba(0, 255, 255, 0.7);
}

/* ‚å®Ô∏è Futuristic Typing Indicator */
.typing-indicator {
  display: flex;
  gap: 6px;
  align-items: center;
  margin: 12px 0;
  margin-right: auto;
}

.typing-indicator span {
  width: 8px;
  height: 8px;
  background: #00f0ff;
  border-radius: 50%;
  display: inline-block;
  animation: pulse 1.4s infinite;
  box-shadow: 0 0 8px rgba(0, 255, 255, 0.8);
}

.typing-indicator span:nth-child(2) {
  animation-delay: 0.2s;
}
.typing-indicator span:nth-child(3) {
  animation-delay: 0.4s;
}

@keyframes pulse {
  0%, 80%, 100% { transform: scale(0.7); opacity: 0.6; }
  40% { transform: scale(1.3); opacity: 1; }
}

/* üìù Input Area */
.input-box {
  display: flex;
  gap: 10px;
}

.input-box input {
  flex: 1;
  padding: 12px;
  border-radius: 10px;
  border: none;
  font-size: 15px;
  color: #fff;
  background: rgba(255, 255, 255, 0.08);
  border: 1px solid rgba(0, 255, 255, 0.3);
  box-shadow: inset 0 0 10px rgba(0, 255, 255, 0.2);
  transition: all 0.3s ease;
}

.input-box input:focus {
  outline: none;
  box-shadow: 0 0 12px rgba(0, 255, 255, 0.6),
              inset 0 0 10px rgba(0, 255, 255, 0.3);
}

/* üöÄ Send Button (Neon Glow) */
.input-box button {
  padding: 12px 18px;
  border: none;
  background: linear-gradient(145deg, #00f0ff, #007bff);
  color: white;
  border-radius: 10px;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 0 12px rgba(0, 255, 255, 0.6);
}

.input-box button:hover {
  background: linear-gradient(145deg, #00caff, #0056b3);
  transform: scale(1.1);
  box-shadow: 0 0 20px rgba(0, 255, 255, 0.9);
}

.input-box button:active {
  transform: scale(0.95);
}
